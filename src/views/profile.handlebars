<div class="profile-container">
  <h2>Mi Perfil</h2>
  
  <div id="notifications"></div>
  
  <div class="profile-content">
    <div class="profile-info">
      <div class="user-avatar">
        <div class="avatar-circle">
          <span id="userInitials">{{user.first_name.0}}{{user.last_name.0}}</span>
        </div>
      </div>
      
      <div class="user-details">
        <h3 id="userName">{{user.first_name}} {{user.last_name}}</h3>
        <p class="user-email">{{user.email}}</p>
        <p class="user-role">
          <span class="role-badge {{user.role}}">
            {{#if (eq user.role 'admin')}}👑 Administrador{{else}}👤 Usuario{{/if}}
          </span>
        </p>
        <p class="user-age">Edad: {{user.age}} años</p>
      </div>
    </div>
    
    <div class="profile-actions">
      <button onclick="showEditForm()" class="btn-edit">Editar Perfil</button>
      <button onclick="logout()" class="btn-logout">Cerrar Sesión</button>
      {{#if user.cart}}
        <a href="/cart/{{user.cart}}" class="btn-cart">Ver Mi Carrito</a>
      {{/if}}
    </div>
  </div>
  
   Formulario de edición (oculto inicialmente) 
  <div id="editForm" class="edit-form" style="display: none;">
    <h3>Editar Perfil</h3>
    <form id="updateProfileForm">
      <div class="form-row">
        <div class="form-group">
          <label for="edit_first_name">Nombre:</label>
          <input type="text" id="edit_first_name" name="first_name" value="{{user.first_name}}" required>
        </div>
        
        <div class="form-group">
          <label for="edit_last_name">Apellido:</label>
          <input type="text" id="edit_last_name" name="last_name" value="{{user.last_name}}" required>
        </div>
      </div>
      
      <div class="form-group">
        <label for="edit_age">Edad:</label>
        <input type="number" id="edit_age" name="age" value="{{user.age}}" min="1" max="120" required>
      </div>
      
      <div class="form-group">
        <label for="edit_password">Nueva Contraseña (opcional):</label>
        <input type="password" id="edit_password" name="password" minlength="6">
        <small>Deja en blanco si no quieres cambiar la contraseña</small>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn-save">Guardar Cambios</button>
        <button type="button" onclick="hideEditForm()" class="btn-cancel">Cancelar</button>
      </div>
    </form>
  </div>
  
   Información adicional 
  <div class="profile-stats">
    <h3>Información de la Cuenta</h3>
    <div class="stats-grid">
      <div class="stat-item">
        <span class="stat-label">Miembro desde:</span>
        <span class="stat-value">{{formatDate user.createdAt}}</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">Última actualización:</span>
        <span class="stat-value">{{formatDate user.updatedAt}}</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">ID de Usuario:</span>
        <span class="stat-value">{{user.id}}</span>
      </div>
    </div>
  </div>
</div>

<script>
// Obtener datos del usuario del localStorage
const userData = JSON.parse(localStorage.getItem('userData') || '{}');
const authToken = localStorage.getItem('authToken');

// Verificar autenticación
if (!authToken || !userData.id) {
  window.location.href = '/login';
}

function showEditForm() {
  document.getElementById('editForm').style.display = 'block';
}

function hideEditForm() {
  document.getElementById('editForm').style.display = 'none';
}

document.getElementById('updateProfileForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const updateData = {
    first_name: formData.get('first_name'),
    last_name: formData.get('last_name'),
    age: parseInt(formData.get('age'))
  };
  
  // Solo incluir contraseña si se proporcionó
  const password = formData.get('password');
  if (password && password.trim()) {
    updateData.password = password;
  }
  
  try {
    showNotification('Actualizando perfil...', 'info');
    
    const response = await fetch(`/api/users/${userData.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify(updateData)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showNotification('Perfil actualizado exitosamente', 'success');
      
      // Actualizar datos en localStorage
      const updatedUser = { ...userData, ...result.user };
      localStorage.setItem('userData', JSON.stringify(updatedUser));
      
      // Actualizar la interfaz
      document.getElementById('userName').textContent = `${result.user.first_name} ${result.user.last_name}`;
      document.getElementById('userInitials').textContent = `${result.user.first_name[0]}${result.user.last_name[0]}`;
      
      hideEditForm();
      
    } else {
      showNotification(result.error || 'Error al actualizar el perfil', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al conectar con el servidor', 'error');
  }
});

function logout() {
  if (confirm('¿Estás seguro de que quieres cerrar sesión?')) {
    // Limpiar localStorage
    localStorage.removeItem('authToken');
    localStorage.removeItem('userData');
    
    // Redirigir al login
    window.location.href = '/login';
  }
}

function showNotification(message, type = 'info') {
  const notificationsDiv = document.getElementById('notifications');
  if (notificationsDiv) {
    notificationsDiv.innerHTML = `<div class="notification ${type}">${message}</div>`;
    
    setTimeout(() => {
      notificationsDiv.innerHTML = '';
    }, 5000);
  }
}
</script>

<style>
.profile-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.profile-content {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-bottom: 30px;
}

.profile-info {
  display: flex;
  align-items: center;
  gap: 30px;
  margin-bottom: 30px;
}

.user-avatar {
  flex-shrink: 0;
}

.avatar-circle {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: linear-gradient(135deg, #007bff, #0056b3);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 36px;
  font-weight: bold;
}

.user-details h3 {
  margin: 0 0 10px 0;
  color: #333;
  font-size: 24px;
}

.user-email {
  color: #666;
  font-size: 16px;
  margin: 5px 0;
}

.user-age {
  color: #666;
  font-size: 14px;
  margin: 5px 0;
}

.role-badge {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: bold;
  margin: 5px 0;
}

.role-badge.admin {
  background-color: #dc3545;
  color: white;
}

.role-badge.user {
  background-color: #28a745;
  color: white;
}

.profile-actions {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.btn-edit, .btn-logout, .btn-cart {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  font-size: 14px;
  transition: all 0.3s;
}

.btn-edit {
  background-color: #007bff;
  color: white;
}

.btn-edit:hover {
  background-color: #0056b3;
}

.btn-logout {
  background-color: #dc3545;
  color: white;
}

.btn-logout:hover {
  background-color: #c82333;
}

.btn-cart {
  background-color: #28a745;
  color: white;
}

.btn-cart:hover {
  background-color: #218838;
}

.edit-form {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-bottom: 30px;
}

.edit-form h3 {
  margin-bottom: 20px;
  color: #333;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 15px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 14px;
  box-sizing: border-box;
}

.form-group input:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

.form-group small {
  color: #666;
  font-size: 12px;
  margin-top: 5px;
  display: block;
}

.form-actions {
  display: flex;
  gap: 10px;
}

.btn-save, .btn-cancel {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
}

.btn-save {
  background-color: #28a745;
  color: white;
}

.btn-save:hover {
  background-color: #218838;
}

.btn-cancel {
  background-color: #6c757d;
  color: white;
}

.btn-cancel:hover {
  background-color: #545b62;
}

.profile-stats {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.profile-stats h3 {
  margin-bottom: 20px;
  color: #333;
}

.stats-grid {
  display: grid;
  gap: 15px;
}

.stat-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 0;
  border-bottom: 1px solid #eee;
}

.stat-item:last-child {
  border-bottom: none;
}

.stat-label {
  font-weight: bold;
  color: #555;
}

.stat-value {
  color: #333;
  font-family: monospace;
}

.notification {
  padding: 10px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  text-align: center;
}

.notification.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.notification.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.notification.info {
  background-color: #d1ecf1;
  color: #0c5460;
  border: 1px solid #bee5eb;
}

@media (max-width: 768px) {
  .profile-info {
    flex-direction: column;
    text-align: center;
  }
  
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .profile-actions {
    justify-content: center;
  }
}
</style>

<h2>Productos en Tiempo Real</h2>

<div id="notifications" class="notifications"></div>

<!-- Formulario para agregar productos -->
<div class="product-form">
  <h3>Agregar Nuevo Producto</h3>
  <form id="productForm">
    <div class="form-group">
      <label for="title">Título:</label>
      <input type="text" id="title" name="title" required>
    </div>
    
    <div class="form-group">
      <label for="description">Descripción:</label>
      <textarea id="description" name="description" required></textarea>
    </div>
    
    <div class="form-group">
      <label for="code">Código:</label>
      <input type="text" id="code" name="code" required>
    </div>
    
    <div class="form-group">
      <label for="price">Precio:</label>
      <input type="number" id="price" name="price" step="0.01" required>
    </div>
    
    <div class="form-group">
      <label for="stock">Stock:</label>
      <input type="number" id="stock" name="stock" required>
    </div>
    
    <div class="form-group">
      <label for="category">Categoría:</label>
      <input type="text" id="category" name="category" required>
    </div>
    
    <button type="submit">Agregar Producto</button>
  </form>
</div>

<!-- Lista de productos -->
<div class="products-container">
  <h3>Lista de Productos</h3>
  {{#if products.length}}
    <ul id="products-list">
      {{#each products}}
        <li data-id="{{this._id}}" class="product-item">
          <div class="product-info">
            <h4>{{this.title}}</h4>
            <p>{{this.description}}</p>
            <p><strong>Precio:</strong> ${{this.price}}</p>
            <p><strong>Stock:</strong> {{this.stock}}</p>
            <p><strong>Categoría:</strong> {{this.category}}</p>
            <p><strong>Código:</strong> {{this.code}}</p>
          </div>
          <div class="product-actions">
            <button data-action="add-to-cart" data-product-id="{{this._id}}" class="btn-cart">Agregar al Carrito</button>
            <button data-action="delete-product" data-product-id="{{this._id}}" class="btn-delete">Eliminar</button>
          </div>
        </li>
      {{/each}}
    </ul>
  {{else}}
    <p>No hay productos disponibles.</p>
  {{/if}}
</div>

<style>
.product-form {
  background: #f5f5f5;
  padding: 20px;
  margin-bottom: 30px;
  border-radius: 8px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.form-group textarea {
  height: 80px;
  resize: vertical;
}

.product-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  margin-bottom: 10px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background: white;
}

.product-info {
  flex: 1;
}

.product-actions {
  display: flex;
  gap: 10px;
}

.btn-cart {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-delete {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-cart:hover {
  background-color: #218838;
}

.btn-delete:hover {
  background-color: #c82333;
}

.notifications {
  background: #d4edda;
  border: 1px solid #c3e6cb;
  color: #155724;
  padding: 10px;
  margin-bottom: 20px;
  border-radius: 4px;
  min-height: 20px;
}
</style>

<script>
// Conectar a Socket.IO
const socket = io();

// Escuchar eventos del servidor
socket.on('product_added', function(product) {
  addProductToList(product);
  showNotification('Nuevo producto agregado', 'success');
});

socket.on('product_deleted', function(data) {
  const productElement = document.querySelector(`[data-id="${data.pid}"]`);
  if (productElement) {
    productElement.remove();
  }
  showNotification('Producto eliminado', 'success');
});

socket.on('product_created_success', function(product) {
  showNotification('Producto creado exitosamente', 'success');
  document.getElementById('productForm').reset();
});

socket.on('product_created_error', function(data) {
  showNotification(`Error: ${data.error}`, 'error');
});

socket.on('product_deleted_success', function(data) {
  showNotification('Producto eliminado exitosamente', 'success');
});

socket.on('product_deleted_error', function(data) {
  showNotification(`Error: ${data.error}`, 'error');
});

document.addEventListener('click', function(e) {
  if (e.target.matches('[data-action="add-to-cart"]')) {
    const productId = e.target.dataset.productId;
    addToCart(productId);
  } else if (e.target.matches('[data-action="delete-product"]')) {
    const productId = e.target.dataset.productId;
    deleteProduct(productId);
  }
});

// Manejar envío del formulario
document.getElementById('productForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const productData = {
    title: formData.get('title'),
    description: formData.get('description'),
    code: formData.get('code'),
    price: parseFloat(formData.get('price')),
    stock: parseInt(formData.get('stock')),
    category: formData.get('category')
  };
  
  // Enviar por WebSocket
  socket.emit('create_product', productData);
});

async function addToCart(productId) {
  try {
    // Obtener o crear carrito
    let cartId = localStorage.getItem('cartId');
    
    if (!cartId) {
      const createCartResponse = await fetch('/api/carts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (createCartResponse.ok) {
        const newCart = await createCartResponse.json();
        cartId = newCart._id;
        localStorage.setItem('cartId', cartId);
      } else {
        throw new Error('No se pudo crear el carrito');
      }
    }
    
    const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      showNotification('Producto añadido al carrito', 'success');
    } else {
      const errorData = await response.json();
      showNotification(`Error: ${errorData.error}`, 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al conectar con el servidor', 'error');
  }
}

async function deleteProduct(productId) {
  if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
    try {
      if (!productId || productId.trim() === '') {
        showNotification('Error: ID de producto inválido', 'error');
        return;
      }
      
      console.log('Enviando delete_product con ID:', productId);
      
      socket.emit('delete_product', productId);
      
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error al conectar con el servidor', 'error');
    }
  }
}

function addProductToList(product) {
  const productsList = document.getElementById('products-list');
  if (!productsList) return;
  
  const li = document.createElement('li');
  li.setAttribute('data-id', product._id);
  li.className = 'product-item';
  
  li.innerHTML = `
    <div class="product-info">
      <h4>${product.title}</h4>
      <p>${product.description}</p>
      <p><strong>Precio:</strong> $${product.price}</p>
      <p><strong>Stock:</strong> ${product.stock}</p>
      <p><strong>Categoría:</strong> ${product.category}</p>
      <p><strong>Código:</strong> ${product.code}</p>
    </div>
    <div class="product-actions">
      <button data-action="add-to-cart" data-product-id="${product._id}" class="btn-cart">Agregar al Carrito</button>
      <button data-action="delete-product" data-product-id="${product._id}" class="btn-delete">Eliminar</button>
    </div>
  `;
  
  productsList.appendChild(li);
}

function showNotification(message, type = 'info') {
  const notificationsDiv = document.getElementById('notifications');
  if (notificationsDiv) {
    notificationsDiv.innerHTML = `<div class="notification ${type}">${message}</div>`;
    
    setTimeout(() => {
      notificationsDiv.innerHTML = '';
    }, 3000);
  }
}
</script>


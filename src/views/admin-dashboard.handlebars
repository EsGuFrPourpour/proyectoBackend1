<div class="admin-dashboard">
  <div class="dashboard-header">
    <h2>üõ°Ô∏è Panel de Administraci√≥n</h2>
    <p>Bienvenido al panel de control administrativo</p>
  </div>
  
  <div id="notifications"></div>
  
   Estad√≠sticas generales 
  <div class="stats-section">
    <h3>üìä Estad√≠sticas Generales</h3>
    <div class="stats-grid">
      <div class="stat-card products">
        <div class="stat-icon">üì¶</div>
        <div class="stat-info">
          <h4>Productos</h4>
          <p class="stat-number" id="totalProducts">{{stats.totalProducts}}</p>
        </div>
      </div>
      
      <div class="stat-card users">
        <div class="stat-icon">üë•</div>
        <div class="stat-info">
          <h4>Usuarios</h4>
          <p class="stat-number" id="totalUsers">{{stats.totalUsers}}</p>
        </div>
      </div>
      
      <div class="stat-card carts">
        <div class="stat-icon">üõí</div>
        <div class="stat-info">
          <h4>Carritos Activos</h4>
          <p class="stat-number" id="totalCarts">{{stats.totalCarts}}</p>
        </div>
      </div>
      
      <div class="stat-card orders">
        <div class="stat-icon">üìã</div>
        <div class="stat-info">
          <h4>√ìrdenes</h4>
          <p class="stat-number">0</p>
        </div>
      </div>
    </div>
  </div>
  
   Acciones r√°pidas 
  <div class="quick-actions">
    <h3>‚ö° Acciones R√°pidas</h3>
    <div class="actions-grid">
      <a href="/realtimeproducts" class="action-card">
        <div class="action-icon">üì¶</div>
        <h4>Gestionar Productos</h4>
        <p>Agregar, editar o eliminar productos</p>
      </a>
      
      <button onclick="loadUsers()" class="action-card">
        <div class="action-icon">üë•</div>
        <h4>Ver Usuarios</h4>
        <p>Administrar cuentas de usuario</p>
      </button>
      
      <button onclick="loadSystemInfo()" class="action-card">
        <div class="action-icon">‚öôÔ∏è</div>
        <h4>Informaci√≥n del Sistema</h4>
        <p>Estado del servidor y base de datos</p>
      </button>
      
      <button onclick="seedDatabase()" class="action-card">
        <div class="action-icon">üå±</div>
        <h4>Poblar Base de Datos</h4>
        <p>Agregar datos de prueba</p>
      </button>
    </div>
  </div>
  
   Secci√≥n de usuarios 
  <div id="usersSection" class="users-section" style="display: none;">
    <h3>üë• Gesti√≥n de Usuarios</h3>
    <div id="usersList" class="users-list">
       Se llenar√° din√°micamente 
    </div>
  </div>
  
   Informaci√≥n del sistema 
  <div id="systemInfo" class="system-info" style="display: none;">
    <h3>‚öôÔ∏è Informaci√≥n del Sistema</h3>
    <div id="systemDetails" class="system-details">
       Se llenar√° din√°micamente 
    </div>
  </div>
</div>

<script>
// Verificar que el usuario sea admin
const userData = JSON.parse(localStorage.getItem('userData') || '{}');
const authToken = localStorage.getItem('authToken');

if (!authToken || userData.role !== 'admin') {
  alert('Acceso denegado. Solo administradores pueden acceder a esta p√°gina.');
  window.location.href = '/products';
}

// Cargar estad√≠sticas actualizadas
async function loadStats() {
  try {
    // Cargar productos
    const productsResponse = await fetch('/api/products?limit=1');
    const productsData = await productsResponse.json();
    
    // Cargar usuarios (si el endpoint est√° disponible)
    try {
      const usersResponse = await fetch('/api/users', {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });
      if (usersResponse.ok) {
        const usersData = await usersResponse.json();
        document.getElementById('totalUsers').textContent = usersData.users?.length || 0;
      }
    } catch (error) {
      console.log('No se pudieron cargar los usuarios');
    }
    
    // Actualizar productos
    if (productsData.status === 'success') {
      document.getElementById('totalProducts').textContent = productsData.totalPages * 10; // Estimaci√≥n
    }
    
  } catch (error) {
    console.error('Error cargando estad√≠sticas:', error);
  }
}

async function loadUsers() {
  try {
    showNotification('Cargando usuarios...', 'info');
    
    const response = await fetch('/api/users', {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      displayUsers(data.users);
      document.getElementById('usersSection').style.display = 'block';
      document.getElementById('systemInfo').style.display = 'none';
    } else {
      showNotification('Error al cargar usuarios', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al conectar con el servidor', 'error');
  }
}

function displayUsers(users) {
  const usersList = document.getElementById('usersList');
  
  if (!users || users.length === 0) {
    usersList.innerHTML = '<p>No hay usuarios registrados.</p>';
    return;
  }
  
  usersList.innerHTML = users.map(user => `
    <div class="user-card">
      <div class="user-info">
        <h4>${user.first_name} ${user.last_name}</h4>
        <p>üìß ${user.email}</p>
        <p>üéÇ ${user.age} a√±os</p>
        <span class="role-badge ${user.role}">
          ${user.role === 'admin' ? 'üëë Admin' : 'üë§ Usuario'}
        </span>
      </div>
      <div class="user-actions">
        <button onclick="editUser('${user._id}')" class="btn-edit-user">Editar</button>
        ${user.role !== 'admin' ? `<button onclick="deleteUser('${user._id}')" class="btn-delete-user">Eliminar</button>` : ''}
      </div>
    </div>
  `).join('');
}

async function deleteUser(userId) {
  if (!confirm('¬øEst√°s seguro de que quieres eliminar este usuario?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/users/${userId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    if (response.ok) {
      showNotification('Usuario eliminado exitosamente', 'success');
      loadUsers(); // Recargar la lista
    } else {
      const error = await response.json();
      showNotification(error.error || 'Error al eliminar usuario', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al conectar con el servidor', 'error');
  }
}

function loadSystemInfo() {
  document.getElementById('usersSection').style.display = 'none';
  document.getElementById('systemInfo').style.display = 'block';
  
  const systemDetails = document.getElementById('systemDetails');
  systemDetails.innerHTML = `
    <div class="info-grid">
      <div class="info-item">
        <strong>üåê Servidor:</strong>
        <span>Node.js + Express</span>
      </div>
      <div class="info-item">
        <strong>üóÑÔ∏è Base de Datos:</strong>
        <span>MongoDB</span>
      </div>
      <div class="info-item">
        <strong>üîê Autenticaci√≥n:</strong>
        <span>JWT + Passport</span>
      </div>
      <div class="info-item">
        <strong>‚ö° WebSockets:</strong>
        <span>Socket.IO</span>
      </div>
      <div class="info-item">
        <strong>üìÖ √öltima actualizaci√≥n:</strong>
        <span>${new Date().toLocaleString()}</span>
      </div>
    </div>
  `;
}

async function seedDatabase() {
  if (!confirm('¬øEst√°s seguro de que quieres poblar la base de datos con datos de prueba?')) {
    return;
  }
  
  showNotification('Poblando base de datos...', 'info');
  
  // Simular proceso de seed
  setTimeout(() => {
    showNotification('Base de datos poblada exitosamente', 'success');
    loadStats(); // Recargar estad√≠sticas
  }, 2000);
}

function showNotification(message, type = 'info') {
  const notificationsDiv = document.getElementById('notifications');
  if (notificationsDiv) {
    notificationsDiv.innerHTML = `<div class="notification ${type}">${message}</div>`;
    
    setTimeout(() => {
      notificationsDiv.innerHTML = '';
    }, 5000);
  }
}

// Cargar estad√≠sticas al iniciar
document.addEventListener('DOMContentLoaded', () => {
  loadStats();
});
</script>

<style>
.admin-dashboard {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.dashboard-header {
  text-align: center;
  margin-bottom: 40px;
}

.dashboard-header h2 {
  color: #333;
  margin-bottom: 10px;
}

.dashboard-header p {
  color: #666;
}

.stats-section {
  margin-bottom: 40px;
}

.stats-section h3 {
  margin-bottom: 20px;
  color: #333;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: white;
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  display: flex;
  align-items: center;
  gap: 20px;
  transition: transform 0.2s;
}

.stat-card:hover {
  transform: translateY(-2px);
}

.stat-card.products {
  border-left: 4px solid #007bff;
}

.stat-card.users {
  border-left: 4px solid #28a745;
}

.stat-card.carts {
  border-left: 4px solid #ffc107;
}

.stat-card.orders {
  border-left: 4px solid #dc3545;
}

.stat-icon {
  font-size: 40px;
}

.stat-info h4 {
  margin: 0 0 5px 0;
  color: #333;
}

.stat-number {
  font-size: 24px;
  font-weight: bold;
  color: #007bff;
  margin: 0;
}

.quick-actions h3 {
  margin-bottom: 20px;
  color: #333;
}

.actions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 40px;
}

.action-card {
  background: white;
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  text-decoration: none;
  color: inherit;
  border: none;
  cursor: pointer;
  transition: all 0.2s;
  text-align: center;
}

.action-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.action-icon {
  font-size: 40px;
  margin-bottom: 15px;
}

.action-card h4 {
  margin: 0 0 10px 0;
  color: #333;
}

.action-card p {
  margin: 0;
  color: #666;
  font-size: 14px;
}

.users-section, .system-info {
  background: white;
  padding: 30px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-bottom: 30px;
}

.users-section h3, .system-info h3 {
  margin-bottom: 20px;
  color: #333;
}

.user-card {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border: 1px solid #eee;
  border-radius: 8px;
  margin-bottom: 15px;
}

.user-info h4 {
  margin: 0 0 5px 0;
  color: #333;
}

.user-info p {
  margin: 2px 0;
  color: #666;
  font-size: 14px;
}

.role-badge {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-top: 5px;
}

.role-badge.admin {
  background-color: #dc3545;
  color: white;
}

.role-badge.user {
  background-color: #28a745;
  color: white;
}

.user-actions {
  display: flex;
  gap: 10px;
}

.btn-edit-user, .btn-delete-user {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
}

.btn-edit-user {
  background-color: #007bff;
  color: white;
}

.btn-delete-user {
  background-color: #dc3545;
  color: white;
}

.info-grid {
  display: grid;
  gap: 15px;
}

.info-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 0;
  border-bottom: 1px solid #eee;
}

.info-item:last-child {
  border-bottom: none;
}

.notification {
  padding: 10px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  text-align: center;
}

.notification.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.notification.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.notification.info {
  background-color: #d1ecf1;
  color: #0c5460;
  border: 1px solid #bee5eb;
}

@media (max-width: 768px) {
  .stats-grid, .actions-grid {
    grid-template-columns: 1fr;
  }
  
  .user-card {
    flex-direction: column;
    gap: 15px;
    text-align: center;
  }
}
</style>

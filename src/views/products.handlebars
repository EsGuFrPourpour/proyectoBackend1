<div class="products-container">
  <h2>Catálogo de Productos</h2>
  
  <!-- Filtros y Búsqueda -->
  <div class="filters-section">
    <form id="filtersForm" class="filters-form">
      <div class="filter-group">
        <label for="search">Buscar:</label>
        <input type="text" id="search" name="query" placeholder="Buscar productos..." value="{{query}}">
      </div>
      
      <div class="filter-group">
        <label for="category">Categoría:</label>
        <select id="category" name="category">
          <option value="">Todas las categorías</option>
          <option value="Electrónica" {{#if (eq category 'Electrónica')}}selected{{/if}}>Electrónica</option>
          <option value="Computadoras" {{#if (eq category 'Computadoras')}}selected{{/if}}>Computadoras</option>
          <option value="Accesorios" {{#if (eq category 'Accesorios')}}selected{{/if}}>Accesorios</option>
          <option value="Tablets" {{#if (eq category 'Tablets')}}selected{{/if}}>Tablets</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label for="sort">Ordenar por precio:</label>
        <select id="sort" name="sort">
          <option value="">Sin ordenar</option>
          <option value="asc" {{#if (eq sort 'asc')}}selected{{/if}}>Menor a mayor</option>
          <option value="desc" {{#if (eq sort 'desc')}}selected{{/if}}>Mayor a menor</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label for="limit">Productos por página:</label>
        <select id="limit" name="limit">
          <option value="5" {{#if (eq limit '5')}}selected{{/if}}>5</option>
          <option value="10" {{#if (eq limit '10')}}selected{{/if}}>10</option>
          <option value="20" {{#if (eq limit '20')}}selected{{/if}}>20</option>
        </select>
      </div>
      
      <button type="submit" class="btn-filter">Aplicar Filtros</button>
      <button type="button" data-action="clear-filters" class="btn-clear">Limpiar</button>
    </form>
  </div>

  <div id="notifications"></div>

  {{#if (eq status 'success')}}
    {{#if payload.length}}
      <!-- Lista de Productos -->
      <div class="products-grid" id="products-list">
        {{#each payload}}
          <div class="product-card" data-id="{{this._id}}">
            <div class="product-image">
              {{#if this.thumbnails.length}}
                <img src="{{this.thumbnails.[0]}}" alt="{{this.title}}" data-fallback="/images/no-image.png">
              {{else}}
                <img src="/images/no-image.png" alt="Sin imagen disponible">
              {{/if}}
            </div>
            
            <div class="product-info">
              <h3>{{this.title}}</h3>
              <p class="product-description">{{this.description}}</p>
              <div class="product-details">
                <span class="price">${{this.price}}</span>
                <span class="category">{{this.category}}</span>
                <span class="stock {{#if this.stock}}in-stock{{else}}out-of-stock{{/if}}">
                  Stock: {{this.stock}}
                </span>
              </div>
            </div>
            
            <div class="product-actions">
              <a href="/products/{{this._id}}" class="btn-details">Ver Detalles</a>
              {{#if this.stock}}
                <button data-action="add-to-cart" data-product-id="{{this._id}}" class="btn-add-cart">
                  Agregar al Carrito
                </button>
              {{else}}
                <button class="btn-out-of-stock" disabled>Sin Stock</button>
              {{/if}}
            </div>
          </div>
        {{/each}}
      </div>

      <!-- Paginación -->
      <div class="pagination">
        <div class="pagination-info">
          <p>Página {{page}} de {{totalPages}} ({{payload.length}} productos)</p>
        </div>
        
        <div class="pagination-controls">
          {{#if hasPrevPage}}
            <a href="{{prevLink}}" class="btn-page">« Anterior</a>
          {{else}}
            <span class="btn-page disabled">« Anterior</span>
          {{/if}}
          
          <span class="current-page">{{page}}</span>
          
          {{#if hasNextPage}}
            <a href="{{nextLink}}" class="btn-page">Siguiente »</a>
          {{else}}
            <span class="btn-page disabled">Siguiente »</span>
          {{/if}}
        </div>
      </div>
    {{else}}
      <div class="no-products">
        <p>No se encontraron productos con los filtros aplicados.</p>
        <button data-action="clear-filters" class="btn-clear">Limpiar Filtros</button>
      </div>
    {{/if}}
  {{else}}
    <div class="error-message">
      <p>Error al cargar los productos: {{error}}</p>
      <button data-action="reload-page" class="btn-retry">Reintentar</button>
    </div>
  {{/if}}
</div>

<script>
// Manejar formulario de filtros
document.getElementById('filtersForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  const params = new URLSearchParams();
  
  for (let [key, value] of formData.entries()) {
    if (value.trim()) {
      params.append(key, value);
    }
  }
  
  // Siempre empezar desde la página 1 cuando se aplican filtros
  params.set('page', '1');
  
  window.location.href = `/products?${params.toString()}`;
});

document.addEventListener('click', function(e) {
  if (e.target.matches('[data-action="clear-filters"]')) {
    clearFilters();
  } else if (e.target.matches('[data-action="add-to-cart"]')) {
    const productId = e.target.dataset.productId;
    addToCart(productId);
  } else if (e.target.matches('[data-action="reload-page"]')) {
    window.location.reload();
  }
});

document.addEventListener('error', function(e) {
  if (e.target.matches('img[data-fallback]')) {
    e.target.src = e.target.dataset.fallback;
  }
}, true);

function clearFilters() {
  window.location.href = '/products';
}

async function addToCart(productId) {
  try {
    console.log('[v0] Agregando producto al carrito:', productId);
    
    // Verificar que productId sea válido
    if (!productId || productId === 'undefined' || productId === 'null') {
      showNotification('Error: ID de producto inválido', 'error');
      return;
    }
    
    const authToken = localStorage.getItem('authToken');
    if (!authToken) {
      showNotification('Debes iniciar sesión para agregar productos al carrito', 'error');
      setTimeout(() => {
        window.location.href = '/login';
      }, 2000);
      return;
    }
    
    let cartId = localStorage.getItem('cartId');
    console.log('[v0] CartId inicial:', cartId, 'tipo:', typeof cartId);
    
    // Limpiar cartId si es inválido - más estricto
    if (!cartId || 
        cartId === 'undefined' || 
        cartId === 'null' || 
        cartId === '[object Object]' ||
        cartId.trim() === '' ||
        cartId.startsWith('{') ||
        cartId.length < 10) { // ObjectId de MongoDB tiene al menos 24 caracteres
      console.log('[v0] CartId inválido detectado, limpiando localStorage');
      localStorage.removeItem('cartId');
      cartId = null;
    }
    
    // Crear carrito si no existe
    if (!cartId) {
      console.log('[v0] Creando nuevo carrito...');
      const createCartResponse = await fetch('/api/carts', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json'
          // No enviar Authorization header para crear carrito
        }
      });
      
      if (createCartResponse.ok) {
        const newCartData = await createCartResponse.json();
        cartId = newCartData.payload._id || newCartData.payload.id;
        
        if (!cartId || typeof cartId !== 'string' || cartId.length < 10) {
          throw new Error('El servidor devolvió un ID de carrito inválido');
        }
        
        localStorage.setItem('cartId', cartId);
        console.log('[v0] Nuevo carrito creado con ID:', cartId);
      } else {
        const errorData = await createCartResponse.json();
        throw new Error(errorData.message || 'No se pudo crear el carrito');
      }
    }
    
    if (!cartId || 
        typeof cartId !== 'string' || 
        cartId === 'undefined' || 
        cartId === 'null' || 
        cartId.trim() === '' ||
        cartId.length < 10) {
      console.error('[v0] CartId final inválido:', cartId);
      localStorage.removeItem('cartId');
      throw new Error('No se pudo obtener un ID de carrito válido');
    }
    
    console.log('[v0] Agregando producto al carrito:', { cartId, productId });
    
    const url = `/api/carts/${cartId}/products/${productId}`;
    console.log('[v0] URL de la petición:', url);
    
    const response = await fetch(url, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify({ quantity: 1 })
    });
    
    if (response.ok) {
      const result = await response.json();
      showNotification('Producto añadido al carrito', 'success');
      updateCartLink(cartId);
      console.log('[v0] Producto agregado exitosamente');
    } else {
      const errorData = await response.json();
      console.log('[v0] Error del servidor:', errorData);
      showNotification(`Error: ${errorData.message}`, 'error');
    }
  } catch (error) {
    console.error('[v0] Error en addToCart:', error);
    showNotification(`Error: ${error.message}`, 'error');
  }
}

function updateCartLink(cartId) {
  if (!cartId || 
      typeof cartId !== 'string' || 
      cartId === 'undefined' || 
      cartId === 'null' || 
      cartId === '[object Object]' ||
      cartId.trim() === '' ||
      cartId.length < 10) {
    console.log('[v0] CartId inválido para actualizar enlaces:', cartId);
    return;
  }
  
  console.log('[v0] Actualizando enlaces del carrito con ID:', cartId);
  
  const cartLinks = document.querySelectorAll('a[href*="/cart/"]');
  cartLinks.forEach(link => {
    link.href = `/cart/${cartId}`;
  });
}

function showNotification(message, type = 'info') {
  const notificationsDiv = document.getElementById('notifications');
  if (notificationsDiv) {
    notificationsDiv.innerHTML = `<div class="notification ${type}">${message}</div>`;
    
    setTimeout(() => {
      notificationsDiv.innerHTML = '';
    }, 3000);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  let cartId = localStorage.getItem('cartId');
  console.log('[v0] CartId al cargar página:', cartId, 'tipo:', typeof cartId);
  
  if (cartId) {
    if (cartId === 'undefined' || 
        cartId === 'null' || 
        cartId === '[object Object]' ||
        cartId.trim() === '' ||
        cartId.startsWith('{') ||
        cartId.length < 10) {
      console.log('[v0] Limpiando cartId inválido al cargar');
      localStorage.removeItem('cartId');
      return;
    }
    
    // Actualizar enlaces si el cartId es válido
    updateCartLink(cartId);
  }
});
</script>
<div class="auth-container">
  <div class="auth-card">
    <h2>Crear Cuenta</h2>
    
    <div id="notifications"></div>
    
    <form id="registerForm" class="auth-form">
      <div class="form-row">
        <div class="form-group">
          <label for="first_name">Nombre:</label>
          <input type="text" id="first_name" name="first_name" required>
        </div>
        
        <div class="form-group">
          <label for="last_name">Apellido:</label>
          <input type="text" id="last_name" name="last_name" required>
        </div>
      </div>
      
      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
      </div>
      
      <div class="form-group">
        <label for="age">Edad:</label>
        <input type="number" id="age" name="age" min="1" max="120" required>
      </div>
      
      <div class="form-group">
        <label for="password">Contraseña:</label>
        <input type="password" id="password" name="password" required minlength="6">
        <small>Mínimo 6 caracteres</small>
      </div>
      
      <div class="form-group">
        <label for="confirmPassword">Confirmar Contraseña:</label>
        <input type="password" id="confirmPassword" name="confirmPassword" required>
      </div>
      
      <button type="submit" class="btn-auth">Crear Cuenta</button>
    </form>
    
    <div class="auth-links">
      <p>¿Ya tienes cuenta? <a href="/login">Inicia sesión aquí</a></p>
      <p><a href="/products">Continuar sin cuenta</a></p>
    </div>
  </div>
</div>

<script>
document.getElementById('registerForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const password = formData.get('password');
  const confirmPassword = formData.get('confirmPassword');
  
  // Validar que las contraseñas coincidan
  if (password !== confirmPassword) {
    showNotification('Las contraseñas no coinciden', 'error');
    return;
  }
  
  const registerData = {
    first_name: formData.get('first_name'),
    last_name: formData.get('last_name'),
    email: formData.get('email'),
    age: parseInt(formData.get('age')),
    password: password
  };
  
  try {
    showNotification('Creando cuenta...', 'info');
    
    const response = await fetch('/api/sessions/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(registerData)
    });
    
    const result = await response.json();
    
    if (response.ok) {
      showNotification('Cuenta creada exitosamente', 'success');
      
      // Guardar token y datos del usuario
      localStorage.setItem('authToken', result.token);
      localStorage.setItem('userData', JSON.stringify(result.user));
      
      // Asignar carrito del usuario
      if (result.user.cart) {
        localStorage.setItem('cartId', result.user.cart);
      }
      
      // Redirigir a productos
      setTimeout(() => {
        window.location.href = '/products';
      }, 1500);
      
    } else {
      showNotification(result.error || 'Error al crear la cuenta', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Error al conectar con el servidor', 'error');
  }
});

function showNotification(message, type = 'info') {
  const notificationsDiv = document.getElementById('notifications');
  if (notificationsDiv) {
    notificationsDiv.innerHTML = `<div class="notification ${type}">${message}</div>`;
    
    setTimeout(() => {
      notificationsDiv.innerHTML = '';
    }, 5000);
  }
}
</script>

<style>
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: 20px;
}

.auth-card {
  background: white;
  padding: 40px;
  border-radius: 10px;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  width: 100%;
  max-width: 500px;
}

.auth-card h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #333;
}

.auth-form {
  margin-bottom: 20px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 15px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #555;
}

.form-group input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
  box-sizing: border-box;
}

.form-group input:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

.form-group small {
  color: #666;
  font-size: 12px;
  margin-top: 5px;
  display: block;
}

.btn-auth {
  width: 100%;
  background-color: #28a745;
  color: white;
  border: none;
  padding: 12px;
  border-radius: 5px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.btn-auth:hover {
  background-color: #218838;
}

.auth-links {
  text-align: center;
  margin-top: 20px;
}

.auth-links p {
  margin: 10px 0;
}

.auth-links a {
  color: #007bff;
  text-decoration: none;
}

.auth-links a:hover {
  text-decoration: underline;
}

.notification {
  padding: 10px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  text-align: center;
}

.notification.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.notification.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.notification.info {
  background-color: #d1ecf1;
  color: #0c5460;
  border: 1px solid #bee5eb;
}

@media (max-width: 600px) {
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .auth-card {
    padding: 30px 20px;
  }
}
</style>
